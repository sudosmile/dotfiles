================================================================================
Test Command - space required
================================================================================

[]
[$status != 0]
[ $status != 0]

--------------------------------------------------------------------------------

(program
  (command
    name: (concatenation))
  (command
    name: (concatenation
      (variable_expansion
        (variable_name)))
    argument: (word)
    argument: (concatenation
      (integer)))
  (ERROR
    (binary_expression
      (variable_expansion
        (variable_name))
      (concatenation
        (integer)))
    (UNEXPECTED '\0')))

================================================================================
Test Command - simple
================================================================================

[ ]
[  ]
[ $status != 0 ]
[ \( $status != 0 \) ]

test
test one

--------------------------------------------------------------------------------

(program
  (test_command)
  (test_command)
  (test_command
    (binary_expression
      (variable_expansion
        (variable_name))
      (integer)))
  (test_command
    (binary_expression
      (variable_expansion
        (variable_name))
      (integer)))
  (test_command)
  (test_command
    (word)))

================================================================================
Test Command - cond expression
================================================================================

[ 0 -a 1 ]
[ 0.2 -eq 0.3 ]
[ \( $status -o \( 'te' != 'st' -a $status != '0' \)\) ]

test 0 -a 1
test 0.2 -eq 0.3
test \( $status -o \( 'te' != 'st' -a $status != '0' \)\)

--------------------------------------------------------------------------------

(program
  (test_command
    (conditional_expression
      (integer)
      (test_option)
      (integer)))
  (test_command
    (binary_expression
      (float)
      (test_option)
      (float)))
  (test_command
    (conditional_expression
      (variable_expansion
        (variable_name))
      (test_option)
      (conditional_expression
        (binary_expression
          (single_quote_string)
          (single_quote_string))
        (test_option)
        (binary_expression
          (variable_expansion
            (variable_name))
          (single_quote_string)))))
  (test_command
    (conditional_expression
      (integer)
      (test_option)
      (integer)))
  (test_command
    (binary_expression
      (float)
      (test_option)
      (float)))
  (test_command
    (conditional_expression
      (variable_expansion
        (variable_name))
      (test_option)
      (conditional_expression
        (binary_expression
          (single_quote_string)
          (single_quote_string))
        (test_option)
        (binary_expression
          (variable_expansion
            (variable_name))
          (single_quote_string))))))

================================================================================
Test Command - unary expression
================================================================================

[ ! $status ]
[ \( !$status \) -o $status ]
test ! $status
test \( !$status \) -o $status

--------------------------------------------------------------------------------

(program
  (test_command
    (negated_expression
      (variable_expansion
        (variable_name))))
  (test_command
    (conditional_expression
      (negated_expression
        (variable_expansion
          (variable_name)))
      (test_option)
      (variable_expansion
        (variable_name))))
  (test_command
    (negated_expression
      (variable_expansion
        (variable_name))))
  (test_command
    (conditional_expression
      (negated_expression
        (variable_expansion
          (variable_name)))
      (test_option)
      (variable_expansion
        (variable_name)))))

================================================================================
Test Command - binary expression
================================================================================

[ ! 0.0 -eq 1.0 ]
[ \( ! 0.0 -eq 0 \) -o te = st ]
[ $status -eq 0 ]
[ \( !$status -eq 0 \) -a $status -ne 127 ]

test ! 0.0 -eq 1.0
test \( ! 0.0 -eq 0 \) -o te = st
test $status -eq 0
test \( !$status -eq 0 \) -a $status -ne 127

--------------------------------------------------------------------------------

(program
  (test_command
    (negated_expression
      (binary_expression
        (float)
        (test_option)
        (float))))
  (test_command
    (conditional_expression
      (negated_expression
        (binary_expression
          (float)
          (test_option)
          (integer)))
      (test_option)
      (binary_expression
        (word)
        (word))))
  (test_command
    (binary_expression
      (variable_expansion
        (variable_name))
      (test_option)
      (integer)))
  (test_command
    (conditional_expression
      (negated_expression
        (binary_expression
          (variable_expansion
            (variable_name))
          (test_option)
          (integer)))
      (test_option)
      (binary_expression
        (variable_expansion
          (variable_name))
        (test_option)
        (integer))))
  (test_command
    (negated_expression
      (binary_expression
        (float)
        (test_option)
        (float))))
  (test_command
    (conditional_expression
      (negated_expression
        (binary_expression
          (float)
          (test_option)
          (integer)))
      (test_option)
      (binary_expression
        (word)
        (word))))
  (test_command
    (binary_expression
      (variable_expansion
        (variable_name))
      (test_option)
      (integer)))
  (test_command
    (conditional_expression
      (negated_expression
        (binary_expression
          (variable_expansion
            (variable_name))
          (test_option)
          (integer)))
      (test_option)
      (binary_expression
        (variable_expansion
          (variable_name))
        (test_option)
        (integer)))))

================================================================================
Test Command - opearators for files and directories
================================================================================

[ -b ./test.fish ]
[ -c ./test.fish ]
[ -d ./test.fish ]
[ -e ./test.fish ]
[ -f ./test.fish ]
[ -g ./test.fish ]
[ -G ./test.fish ]
[ -k ./test.fish ]
[ -L ./test.fish ]
[ -O ./test.fish ]
[ -p ./test.fish ]
[ -r ./test.fish ]
[ -s ./test.fish ]
[ -S ./test.fish ]
[ -t ./test.fish ]
[ -u ./test.fish ]
[ -w ./test.fish ]
[ -x ./test.fish ]

test -b ./test.fish
test -c ./test.fish
test -d ./test.fish
test -e ./test.fish
test -f ./test.fish
test -g ./test.fish
test -G ./test.fish
test -k ./test.fish
test -L ./test.fish
test -O ./test.fish
test -p ./test.fish
test -r ./test.fish
test -s ./test.fish
test -S ./test.fish
test -t ./test.fish
test -u ./test.fish
test -w ./test.fish
test -x ./test.fish

--------------------------------------------------------------------------------

(program
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word)))
  (test_command
    (unary_expression
      (test_option)
      (word))))

================================================================================
Test Command - operators for text strings
================================================================================

[ "test" = 'test' ]
[ test != 'test' ]
[ -n 'non-zero-string' ]
[ -z '' ]

test "test" = 'test'
test test != 'test'
test -n 'non-zero-string'
test -z ''

--------------------------------------------------------------------------------

(program
  (test_command
    (binary_expression
      (double_quote_string)
      (single_quote_string)))
  (test_command
    (binary_expression
      (word)
      (single_quote_string)))
  (test_command
    (unary_expression
      (test_option)
      (single_quote_string)))
  (test_command
    (unary_expression
      (test_option)
      (single_quote_string)))
  (test_command
    (binary_expression
      (double_quote_string)
      (single_quote_string)))
  (test_command
    (binary_expression
      (word)
      (single_quote_string)))
  (test_command
    (unary_expression
      (test_option)
      (single_quote_string)))
  (test_command
    (unary_expression
      (test_option)
      (single_quote_string))))

================================================================================
Test Command - operators for numbers
================================================================================

[ 0 -eq 0.0 ]
[ 0 -ne 0.0 ]
[ 0 -gt 0.0 ]
[ 0 -lt 0.0 ]
[ 0 -ge 0.0 ]
[ 0 -le 0.0 ]

test 0 -eq 0.0
test 0 -ne 0.0
test 0 -gt 0.0
test 0 -lt 0.0
test 0 -ge 0.0
test 0 -le 0.0

--------------------------------------------------------------------------------

(program
  (test_command
    (binary_expression
      (integer)
      (test_option)
      (float)))
  (test_command
    (binary_expression
      (integer)
      (test_option)
      (float)))
  (test_command
    (binary_expression
      (integer)
      (test_option)
      (float)))
  (test_command
    (binary_expression
      (integer)
      (test_option)
      (float)))
  (test_command
    (binary_expression
      (integer)
      (test_option)
      (float)))
  (test_command
    (binary_expression
      (integer)
      (test_option)
      (float)))
  (test_command
    (binary_expression
      (integer)
      (test_option)
      (float)))
  (test_command
    (binary_expression
      (integer)
      (test_option)
      (float)))
  (test_command
    (binary_expression
      (integer)
      (test_option)
      (float)))
  (test_command
    (binary_expression
      (integer)
      (test_option)
      (float)))
  (test_command
    (binary_expression
      (integer)
      (test_option)
      (float)))
  (test_command
    (binary_expression
      (integer)
      (test_option)
      (float))))
